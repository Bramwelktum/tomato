# -*- coding: utf-8 -*-
"""02_CNN_VGG19.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BGPZOWo6pd4HaxndfDeKEJdi2dRxHQz9
"""

!unzip archive.zip

# Commented out IPython magic to ensure Python compatibility.
import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline
from matplotlib.image import imread
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential, save_model
from tensorflow.keras.layers import Dense, BatchNormalization, Flatten
from tensorflow.keras.losses import CategoricalCrossentropy
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.applications.vgg19 import VGG19, preprocess_input
from tensorflow.keras.preprocessing import image

dataset_directory_location = '/content/tomato'

os.listdir(dataset_directory_location)

train_dataset_location = os.path.join(dataset_directory_location, 'train')
test_dataset_location = os.path.join(dataset_directory_location, 'val')

os.listdir(train_dataset_location)

os.listdir(test_dataset_location)

tomato_bacterial_spot_img = os.path.join(train_dataset_location, 'Tomato___Bacterial_spot')

os.listdir(tomato_bacterial_spot_img)[:1]

tomato_bacterial_spot_img_read = imread(os.path.join(tomato_bacterial_spot_img, 'a3085acc-b437-4987-997b-a2be5b5e9c0d___GCREC_Bact.Sp 3680.JPG'))

plt.imshow(tomato_bacterial_spot_img_read)

tomato_bacterial_spot_img_read.shape

correct_image_shape = (224, 224, 3)

image_gen = ImageDataGenerator(rotation_range=20,
                               width_shift_range=0.1,
                               height_shift_range=0.1,
                               shear_range=0.1,
                               zoom_range=0.1,
                               horizontal_flip=True,
                               fill_mode='nearest',
                               preprocessing_function=preprocess_input)

train_image_gen = image_gen.flow_from_directory(train_dataset_location,
                                                target_size=correct_image_shape[:2],
                                                color_mode='rgb',
                                                batch_size=16,
                                                class_mode='categorical')

test_image_gen = image_gen.flow_from_directory(test_dataset_location,
                                                target_size=correct_image_shape[:2],
                                                color_mode='rgb',
                                                batch_size=16,
                                                class_mode='categorical')

model = Sequential()

vgg19_model = VGG19(weights='imagenet', include_top=False, input_shape=correct_image_shape)

vgg19_model.trainable = False

model.add(vgg19_model)


model.add(Flatten())


model.add(BatchNormalization())

model.add(Dense(128, activation='relu'))
model.add(BatchNormalization())

model.add(Dense(64, activation='relu'))
model.add(BatchNormalization())

model.add(Dense(32, activation='relu'))
model.add(BatchNormalization())

model.add(Dense(10, activation='softmax'))

model.summary()

model.compile(loss=CategoricalCrossentropy(), optimizer=Adam(), metrics=['accuracy'])

model.fit(train_image_gen, validation_data=test_image_gen, epochs=30)

history_df = pd.DataFrame(model.history.history)

history_df[['loss', 'val_loss']].plot()

history_df[['accuracy', 'val_accuracy']].plot()

model.evaluate(train_image_gen)[1]

model.evaluate(test_image_gen)[1]

sample_img_load = image.load_img('/content/tomato/val/Tomato___Target_Spot/0a3b6099-c254-4bc3-8360-53a9f558a0c4___Com.G_TgS_FL 8259.JPG', target_size=correct_image_shape)

sample_img_load

sample_img_to_arr = image.img_to_array(sample_img_load)

sample_img_to_arr_preprocess_input = preprocess_input(sample_img_to_arr)

sample_img_to_arr_expand_dim = np.expand_dims(sample_img_to_arr_preprocess_input, 0)

prediction = model.predict(sample_img_to_arr_expand_dim)[0]

pred_result = np.argmax(prediction)

class_names = ['Tomato___Bacterial_spot', 'Tomato___Early_blight', 'Tomato___Late_blight', 'Tomato___Leaf_Mold', 'Tomato___Septoria_leaf_spot', 'Tomato___Spider_mites Two-spotted_spider_mite', 'Tomato___Target_Spot', 'Tomato___Tomato_Yellow_Leaf_Curl_Virus', 'Tomato___Tomato_mosaic_virus', 'Tomato___healthy']

pred_final_result = class_names[pred_result]

pred_final_result

model.save('02_CNN_VGG19.h5')