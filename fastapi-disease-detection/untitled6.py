# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tUZqjnUss4lok82Tu1mEWqBKMGRyhcWA
"""

# Commented out IPython magic to ensure Python compatibility.
import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline
from matplotlib.image import imread
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential, save_model
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import EarlyStopping
from tensorflow.keras.layers import Dense, Conv2D, Flatten, MaxPooling2D, BatchNormalization, Dropout
from tensorflow.keras.losses import CategoricalCrossentropy
from tensorflow.keras.preprocessing import image

!unzip archive.zip

dataset_directory_location = '/content/tomato'

os.listdir(dataset_directory_location)

train_dataset_location = os.path.join(dataset_directory_location, 'train')
test_dataset_location = os.path.join(dataset_directory_location, 'val')

os.listdir(train_dataset_location)

os.listdir(test_dataset_location)

tomato_bacterial_spot_img = os.path.join(train_dataset_location, 'Tomato___Bacterial_spot')

os.listdir(tomato_bacterial_spot_img)[:1]

tomato_bacterial_spot_img_read = imread(os.path.join(tomato_bacterial_spot_img, 'd504f56f-b000-438e-a81a-e95870d70bb0___GCREC_Bact.Sp 5668.JPG'))

plt.imshow(tomato_bacterial_spot_img_read)

tomato_bacterial_spot_img_read.shape

correct_image_shape = (224, 224, 3)

image_gen = ImageDataGenerator(rotation_range=20,
                               width_shift_range=0.1,
                               height_shift_range=0.1,
                               shear_range=0.1,
                               zoom_range=0.1,
                               horizontal_flip=True,
                               fill_mode='nearest',
                               rescale=1./255)

train_image_gen = image_gen.flow_from_directory(train_dataset_location,
                                                target_size=correct_image_shape[:2],
                                                color_mode='rgb',
                                                batch_size=16,
                                                class_mode='categorical')

test_image_gen = image_gen.flow_from_directory(test_dataset_location,
                                                target_size=correct_image_shape[:2],
                                                color_mode='rgb',
                                                batch_size=16,
                                                class_mode='categorical')

model = Sequential()

model.add(Conv2D(filters=32, kernel_size=(3, 3), input_shape=correct_image_shape, activation='relu'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(filters=32, kernel_size=(3, 3), activation='relu'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Flatten())

model.add(BatchNormalization())

model.add(Dense(128, activation='relu'))
model.add(BatchNormalization())

model.add(Dense(64, activation='relu'))
model.add(BatchNormalization())
model.add(Dropout(0.1))

model.add(Dense(32, activation='relu'))
model.add(BatchNormalization())
model.add(Dropout(0.1))

model.add(Dense(10, activation='softmax'))

model.summary()

model.compile(loss=CategoricalCrossentropy(), optimizer=Adam(learning_rate=2e-5), metrics=['accuracy'])

model.fit(train_image_gen, validation_data=test_image_gen, epochs=30)